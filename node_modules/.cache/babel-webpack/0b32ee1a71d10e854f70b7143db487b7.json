{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    \"Content-Type\": \"application/json\"\n  })\n}; // marks a class as available to Injector for creation\n\nexport let DatabaseService = /*#__PURE__*/(() => {\n  class DatabaseService {\n    constructor(http) {\n      this.http = http;\n    } // a new section to add a movie\n\n\n    addMovie(data) {\n      return this.http.post(\"/movies\", data, httpOptions);\n    } // a new section to delete a movie by aTitle\n    // the new section has to have one text box to enter the value of aTitle\n\n\n    deleteMovieTitle(title) {\n      let url = \"/movies/title/\" + title;\n      return this.http.delete(url, httpOptions);\n    } // a new section to delete all movies produced between aYear1 and aYear2\n    // the new section has to have two text boxes to enter two integer values that represent aYear1 and aYear2\n\n\n    deleteMovieYear(year1, year2) {\n      let url = \"/movies/deleteall/\" + year1 + \"/\" + year2;\n      return this.http.get(url);\n    } // a new section to add an actor to a movie\n    // the section has to show the list of available actors to select one of them\n    // and, the list of available movies to select one of them\n    // a button to insert the selected movie to the selected actor\n    // NOTE: can be verified via Compass\n\n\n    addExistingActor(movieid, actorid, data) {\n      let url = \"/movies/\" + movieid + \"/\" + actorid;\n      return this.http.post(url, data, httpOptions);\n    } // a new section to list all the available movies\n\n\n    listAllMovies() {\n      return this.http.get(\"/movies/getall\");\n    } // path names have to match\n\n\n    getAllActors() {\n      return this.http.get(\"/actors/getall\");\n    }\n\n    getActor(id) {\n      let url = \"/actors/\" + id;\n      return this.http.get(url);\n    }\n\n    createActor(data) {\n      return this.http.post(\"/actors\", data, httpOptions);\n    }\n\n    updateActor(id, data) {\n      let url = \"/actors/\" + id;\n      return this.http.put(url, data, httpOptions);\n    }\n\n    deleteActor(id) {\n      let url = \"/actors/\" + id;\n      return this.http.delete(url, httpOptions);\n    }\n\n  }\n\n  DatabaseService.ɵfac = function DatabaseService_Factory(t) {\n    return new (t || DatabaseService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  DatabaseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DatabaseService,\n    factory: DatabaseService.ɵfac,\n    providedIn: 'root'\n  });\n  return DatabaseService;\n})();","map":null,"metadata":{},"sourceType":"module"}